// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RoleType {
  ADMIN
  MODERATOR
  PREMIUM
  USER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportReason {
  SPAM
  ADVERTISING
  FRAUD
  FINANCIAL_MANIPULATION
  INAPPROPRIATE
  HARASSMENT
  MISINFORMATION
  COPYRIGHT_VIOLATION
  OFF_TOPIC
  OTHER
}

enum UserStatus {
  ACTIVE
  BANNED
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique
  gender    Gender
  birthDate DateTime
  password  String
  roleId    Int
  status    UserStatus @default(ACTIVE)
  following           Follow[]        @relation("Follower")
  followers           Follow[]        @relation("Followed")
  discussions Discussion[]
  credibility   Int     @default(0) 
  followedCommunities UserCommunity[] 
  createdCommunities  Community[]
  likes               Like[] 
  comments            Comment[]
  commentLikes  CommentLike[]  
  bookmarks           Bookmark[]
  notifications    Notification[] 
  filedDiscussionReports      DiscussionReport[] 
  filledCommentReports      CommentReport[]
  moderatedActions    ModerationLog[]  @relation("Admin")   
  actionsOnUser       ModerationLog[]  @relation("AffectedUser") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoriteStocks FavoriteStock[] 


  role      Role     @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

model FavoriteStock {
  id        Int    @id @default(autoincrement())
  userId    Int
  ticker    String
  name      String?  
  type      String? 
  region    String? 
  currency  String?  
  createdAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id])
  
  @@unique([userId, ticker]) 
}

model Community {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String?
  userId       Int 
  isDeleted    Boolean             @default(false)   
  discussions  Discussion[]
  followers    UserCommunity[] 
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user         User       @relation(fields: [userId], references: [id]) 

  @@index([name])
  @@index([userId])
}


model Discussion {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  userId        Int
  communityId   Int
  isDeleted     Boolean             @default(false)
  likes         Like[] 
  comments      Comment[] 
  bookmarks           Bookmark[] 
  trendingScore Float    @default(0) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reports       DiscussionReport[]
  user          User     @relation(fields: [userId], references: [id])
  community     Community       @relation(fields: [communityId], references: [id])

  @@index([userId])
  @@index([communityId])
  @@index([trendingScore])

}

model Like {
  id            Int        @id @default(autoincrement())
  userId        Int
  discussionId  Int

  user          User       @relation(fields: [userId], references: [id])
  discussion    Discussion @relation(fields: [discussionId], references: [id])

  @@unique([userId, discussionId])
  @@index([discussionId])
}

model Comment {
  id            Int        @id @default(autoincrement())
  content       String
  userId        Int
  discussionId  Int
  isDeleted     Boolean             @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  discussion  Discussion @relation(fields: [discussionId], references: [id])
  likes       CommentLike[]
  reports     CommentReport[]

  @@index([userId])
  @@index([discussionId])
}

model CommentLike {
  id            Int       @id @default(autoincrement())
  userId        Int
  commentId     Int
  createdAt     DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id])
  comment       Comment   @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])  // Ensure a user can only like a comment once
}

model Role {
  id        Int      @id @default(autoincrement())
  roleName  RoleType @unique
  users     User[]
  permissions RolePermission[]

  @@index([roleName]) 
}

model Permission {
  id          Int          @id @default(autoincrement())
  permissionName        String       @unique
  description String?
  roles       RolePermission[]
}

model DiscussionReport {
  id              Int         @id @default(autoincrement())
  userId          Int         
  discussionId    Int       
  reason          ReportReason     
  status          ReportStatus @default(PENDING) 
  createdAt       DateTime    @default(now())
  reviewedAt      DateTime?  
  notes           String?
  user            User        @relation(fields: [userId], references: [id])
  discussion      Discussion  @relation(fields: [discussionId], references: [id])
  @@index([userId])
  @@index([discussionId])
}

model CommentReport {
  id          Int            @id @default(autoincrement())
  userId      Int
  commentId   Int
  reason      ReportReason
  status      ReportStatus   @default(PENDING)
  createdAt   DateTime       @default(now())
  reviewedAt  DateTime?
  notes           String?

  user        User           @relation(fields: [userId], references: [id])
  comment     Comment        @relation(fields: [commentId], references: [id])

  @@index([userId])
  @@index([commentId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  type      String
  isRead      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}


// many to many tables 

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserCommunity {
  id           Int             @id @default(autoincrement())
  userId       Int
  communityId  Int
  joinedAt     DateTime        @default(now()) 

  user         User            @relation(fields: [userId], references: [id])
  community    Community       @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])

}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followedId  Int
  createdAt   DateTime @default(now())

  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followed    User     @relation("Followed", fields: [followedId], references: [id])

  @@unique([followerId, followedId]) // Ensures each follow relationship is unique
  @@index([followerId])
  @@index([followedId])
}

model Bookmark {
  id           Int         @id @default(autoincrement())
  userId       Int
  discussionId Int
  createdAt    DateTime    @default(now())

  user         User        @relation(fields: [userId], references: [id])
  discussion   Discussion  @relation(fields: [discussionId], references: [id])

  @@unique([userId, discussionId]) 
  @@index([userId])
  @@index([discussionId])
}

model ModerationLog {
  id           Int          @id @default(autoincrement())
  adminId  Int        
  userId       Int?     
  action       String    
  targetId     Int?      
  createdAt    DateTime     @default(now())

  admin    User         @relation("Admin", fields: [adminId], references: [id])
  user         User?        @relation("AffectedUser", fields: [userId], references: [id])

  @@index([adminId])
  @@index([userId])
}