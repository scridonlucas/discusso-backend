// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RoleType {
  ADMIN
  MODERATOR
  PREMIUM
  USER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}


model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique
  gender    Gender
  birthDate DateTime
  password  String
  roleId    Int
  discussions Discussion[]
  followedCommunities UserCommunity[] 
  createdCommunities  Community[]
  likes               Like[] 
  comments            Comment[]
  notifications    Notification[] 
  filedReports      Report[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role      Role     @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

model Community {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String?
  userId       Int        
  discussions  Discussion[]
  followers    UserCommunity[] 
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  user         User       @relation(fields: [userId], references: [id]) 

  @@index([name])
  @@index([userId])
}


model Discussion {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  userId        Int
  communityId   Int
  likes         Like[] 
  comments      Comment[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reports       Report[]
  user          User     @relation(fields: [userId], references: [id])
  community     Community       @relation(fields: [communityId], references: [id])

  @@index([userId])
  @@index([communityId])

}

model Like {
  id            Int        @id @default(autoincrement())
  userId        Int
  discussionId  Int

  user          User       @relation(fields: [userId], references: [id])
  discussion    Discussion @relation(fields: [discussionId], references: [id])

  @@unique([userId, discussionId])
  @@index([discussionId])
}

model Comment {
  id            Int        @id @default(autoincrement())
  content       String
  userId        Int
  discussionId  Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  discussion  Discussion @relation(fields: [discussionId], references: [id])

  @@index([userId])
  @@index([discussionId])
}

model Role {
  id        Int      @id @default(autoincrement())
  roleName  RoleType @unique
  users     User[]
  permissions RolePermission[]

  @@index([roleName]) 
}

model Permission {
  id          Int          @id @default(autoincrement())
  permissionName        String       @unique
  description String?
  roles       RolePermission[]
}

model Report {
  id              Int         @id @default(autoincrement())
  userId          Int         
  discussionId    Int       
  reason          String     
  status          ReportStatus @default(PENDING) 
  createdAt       DateTime    @default(now())
  reviewedAt      DateTime?  

  user            User        @relation(fields: [userId], references: [id])
  discussion      Discussion  @relation(fields: [discussionId], references: [id])
  
  @@index([userId])
  @@index([discussionId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  type      String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// many to many tables 
model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserCommunity {
  id           Int             @id @default(autoincrement())
  userId       Int
  communityId  Int
  joinedAt     DateTime        @default(now()) 

  user         User            @relation(fields: [userId], references: [id])
  community    Community       @relation(fields: [communityId], references: [id])
}